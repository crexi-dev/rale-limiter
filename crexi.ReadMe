Rate-limiting pattern

Rate limiting involves restricting the number of requests that a client can make. A client is identified with an access token, which is used for every request to a resource. To prevent abuse of the server, APIs enforce rate-limiting techniques. 
The rate-limiting application can decide whether to allow the request based on the client. The client makes an API call to a particular resource; the server checks whether the request for this client is within the limit. 
If the request is within the limit, then the request goes through. Otherwise, the API call is restricted.

Some examples of request-limiting rules (you could imagine any others)

    X requests per timespan;
    a certain timespan has passed since the last call;
    For US-based tokens, we use X requests per timespan; for EU-based tokens, a certain timespan has passed since the last call.

The goal is to design a class(-es) that manages each API resource's rate limits by a set of provided configurable and extendable rules. 
For example, for one resource, you could configure the limiter to use Rule A; for another one - Rule B; for a third one - both A + B, etc. 
Any combination of rules should be possible; keep this fact in mind when designing the classes.

We're more interested in the design itself than in some intelligent and tricky rate-limiting algorithm. 
There is no need to use a database (in-memory storage is fine) or any web framework. 
Do not waste time on preparing complex environment, reusable class library covered by a set of tests is more than enough.

There is a Test Project set up for you to use. However, you are welcome to create your own test project and use whatever test runner you like.

You are welcome to ask any questions regarding the requirements—treat us as product owners, analysts, or whoever knows the business. If you have any questions or concerns, please submit them as a GitHub issue.

You should fork the project and create a pull request named as FirstName LastName once you are finished.

Good luck!

******
Notes from issues:
Ok got it. So rules are strictly resource based and not client.
Meaning if a rule exists on let's say GetPicture resource, that rule
applies to all clients calling that resource.

******
The reason we say no need to add ASP.NET project is moreso to avoid having a lot of the PR adding controllers/endpoints. 
In modern times, we'd add https://learn.microsoft.com/en-us/aspnet/core/performance/rate-limit?view=aspnetcore-8.0 and be on our way. However, you can add that if you want, because you are correct, it's the most natural use case for this test.

    Does it mean "design of the rule configuration classes" or "design of the implementation (such as efficient rule-matching against endpoints and context data and concurrent and safe rule execution"

The latter. While you shouldn't ignore the configuration as it's an important piece without ASP.NET there to add attributes as you mentioned, once you have a resource and 1:M rate limit rules, how do you handle it is the design we are interested in.

******
No need for this exercise, we can assume an endpoint without a rate limit rule is open for consumption.

******


    Does extensibility mean that new rule types may be introduced?

Correct. If a product requirement came in for a new rule, how easily can it be introduced. No worries about recompilation.

    So should there be Any( list of rules ) or All ( list of rules ) logic or just any set of rules (but All must satisfy, which is more real-world)

Any set of rules per endpoint, but all must satisfy. If an endpoint is configured to check >1 rule, ALL must pass. If one fails, the request is rejected.

*****
As for the environment, great question! Let's assume a single node to keep it simple.

*****
Great questions!

    How should I handle client identification for rate-limiting purposes? Should I consider different access tokens for the same client or assume one access token per client?

Let's assume a token uniquely identifies each client. As for the token itself, you're not building the authentication layer, and you don't care how the token was generated; think a client is making a request, and that client has a token and some other associated metadata.

    How should multiple rules be combined? Should they be enforced in a particular order, or should all rules be checked simultaneously for each request?

The goal is to be able to configure a unique combination of rules for each resource. As long as this is achieved, we're good. For simplicity, we could treat those rules as logical ORs.

    Should I be aware of any specific concurrency or thread safety requirements?

We assume the resources will be accessed concurrently, as in real APIs, so the access rules should also support that.

*****
Yes, concurrency should be taken into consideration at some basic level (e.g. if you have shared request log which is accessible from multiple locations).

As for the memory considerations, just use reasonable in-memory data structures, and it would be fine. For the request log, for instance, do not care about flushing the data to some persistent storage to free up memory, etc. We always can dive deeper here when discussing the code moving forward.

This task has been mostly intended to give us an example of your thoughts when designing classes, data structures and tests rather than high-load systems, so feel free to keep it simple :)

*****
Since it is the library specifically for rules, can I assume that the client information is already retrieved through instance of IHttpContextAccessor and injected into this library? 
So I should not mainly worry about getting client information from some token rather have a class for Client with all kind of information (like ClientId, Region) but use that class to determine what kind of rules apply.
You got it right.
Basically you build your own representation of a user which makes sense in a context of library you're building.

*****
